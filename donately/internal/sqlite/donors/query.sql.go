// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package donors

import (
	"context"
	"database/sql"
)

const getDonorAdjustmentsByPerson = `-- name: GetDonorAdjustmentsByPerson :many
SELECT person_id, display_name, slug, amount
FROM donor_adjustments
WHERE person_id = ?1
`

func (q *Queries) GetDonorAdjustmentsByPerson(ctx context.Context, personID sql.NullString) ([]DonorAdjustment, error) {
	rows, err := q.db.QueryContext(ctx, getDonorAdjustmentsByPerson, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DonorAdjustment
	for rows.Next() {
		var i DonorAdjustment
		if err := rows.Scan(
			&i.PersonID,
			&i.DisplayName,
			&i.Slug,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveDonorAdjustment = `-- name: SaveDonorAdjustment :one
INSERT INTO donor_adjustments(
    person_id, 
    display_name, 
    slug,
    amount 
) 
VALUES (
    ?1, 
    ?2, 
    ?3,
    ?4
) 
ON CONFLICT(person_id, slug) DO 
UPDATE SET display_name = ?2, 
           amount = ?4
WHERE person_id = ?1 AND slug = ?3
RETURNING person_id, display_name, slug, amount
`

type SaveDonorAdjustmentParams struct {
	PersonID    sql.NullString
	DisplayName sql.NullString
	Slug        sql.NullString
	Amount      sql.NullFloat64
}

func (q *Queries) SaveDonorAdjustment(ctx context.Context, arg SaveDonorAdjustmentParams) (DonorAdjustment, error) {
	row := q.db.QueryRowContext(ctx, saveDonorAdjustment,
		arg.PersonID,
		arg.DisplayName,
		arg.Slug,
		arg.Amount,
	)
	var i DonorAdjustment
	err := row.Scan(
		&i.PersonID,
		&i.DisplayName,
		&i.Slug,
		&i.Amount,
	)
	return i, err
}
